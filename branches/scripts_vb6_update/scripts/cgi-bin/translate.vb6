#!/bin/sh

#QUERY_STRING=scan

MSDL=/scripts/bin/msdl
WGET=/usr/bin/wget

XSPFSCAN=/usr/local/etc/xspf.scan
CACHEPATH=/opt/tmp
TEMP=/tmp

YOUTUBE_HD=yes
NET_BANDWIDTH=

USERAGENT="Mozilla/4.0 (compatible; MSIE 6.0)"

TMPFILE=$TEMP/tmp.$$

[ ! -d $CACHEPATH ] && CACHEPATH=$TEMP

arg_cmd=`echo "${QUERY_STRING}" | awk -F, '{print $1}'`
arg_opt=`echo "${QUERY_STRING}" | awk -F, '{print $2}'`
arg_url=`echo "${QUERY_STRING}" | awk -F, '{print $3}'`

# http://127.0.0.1/translate.vb6[?<scan|*>]
# http://127.0.0.1/translate.vb6?stream,[<option1;...optionN>],<url>

# Available options:
#   Content-type:<content type>
#   HD:<yes|no>
#   Protocol:<mms|mmst|mmsh|http|rtsp|ftp>
#   Bandwidth:<bps>
#   Speed:<streaming speed>

# http://127.0.0.1/translate.vb6?<info|status>,,<url>
# http://127.0.0.1/translate.vb6?text,,<url>
# http://127.0.0.1/translate.vb6?playlist,,<path to playlist>

# <list>
#   <item>
#     <title></title>
#     <location></location>
#   </item>
# </list>

#
# <info>
# <stream url="" type="" soft="<icecast|shoutcast|youtube>" class="<audio|video>" protocol="" />
# <item>
#   <name/><value/>
# </item>
# <status>
#   <server-status>         s
#   <stream-status>         si (Mount started: <time>)
#   <listener-peak>         si (status: Stream is up at 96 kbps with 138 of 250 listeners (134 unique))
#   <average-listener-time> s
#   <stream-title/>         si
#   <content-type/>         si
#   <stream-genre/>         si
#   <current-song/>         si

#   <stream-bitrate/>       si (status: Stream is up at 96 kbps with 138 of 250 listeners (134 unique))
#   <listeners>             si (status: Stream is up at 96 kbps with 138 of 250 listeners (134 unique))

# </status>
# </info>
#

get_opt()
{
  opt=`echo "${arg_opt}" | grep ";*$1:" | sed "s/^.*$1://;s/;.*//"`
  return 0
}

server_type='' # icecast | shoutcast | youtube
stream_status_url=''

stream_url=${arg_url}

get_opt "Content-type"
stream_type=$opt

print_status_item()
{
    value=`sed -e "s/.*$1: <\/font><\/td><td><font class=default><b>//" $TMPFILE | sed 's/<\/b>.*//' | sed 's/<.*>//g;s/&amp;/&/g;s/&nbsp;/ /g;s/&lt;/</g;s/&gt;/>/g'`
    echo "<$2>$value</$2>"
    return 0
}

print_stat_item()
{
    value=`sed "1,/$1:/d" $TMPFILE | sed '/.*:$/,$d' | sed 's/\n/ /'`
    echo "<$2>$value</$2>"
    return 0
}

check_av_stream()
{
  buf="`${MSDL} -v -o /dev/null --stream-timeout 1 ${arg_url} 2>&1`"
  
  if echo $buf | grep -q -s "cannot establish stream"; then
    exit
  fi  
  
  stream_url=`echo "$buf" | sed -n '/^url:/p' | sed -n '$p' | sed 's/ *url: *//'`
  protocol=`echo "$buf" | sed -n '/^download protocol:/p' | sed -n '$p' | sed 's/.*: //'`
  redirect=`echo "$buf" | sed -n '/^redirect to/p' | sed -n '$p' | awk '{print $3}'`
  
  if [ -n "$redirect" ]; then
    stream_url=$redirect
  fi

  # protocol=(mmst|mmsh|rtsp - real|rtsp - wms|http|ftp)
  
  if [ -z "$stream_type" ]; then
    type=`echo "$buf" | sed -n '/^content type/p' | sed -n '$p' | awk '{print $3}'`
    
    # autodetect stream type
    if [ -z "$type" -o "$type" = "text/html" ]; then
        if [ ! -z "`echo \"$buf\" | grep \"is video stream\"`" ]; then
            type=video/x-ms-wmv
        else
            type=audio/x-ms-wma
        fi
    fi
    
    stream_type=$type
  fi
  
  host=''
  host_response=''
  if [ "$protocol" == "http" ]; then
    # try to define stream server type
    host=`echo "$buf" | sed -n '/^Host:/p' | sed -n '$p' | awk '{print $3}'`
    host_response=`${WGET} -q --header "User-Agent: ${USERAGENT}" -O ${TMPFILE} "http://${host}" 2>&1`
    if grep -q -s icecast ${TMPFILE}; then
      server_type='icecast'
      host_response=`cat ${TMPFILE}`
    elif grep -q -s shoutcast ${TMPFILE}; then
      server_type='shoutcast'
      host_response=`cat ${TMPFILE}`
    fi
    [ "${arg_cmd}" != "info" -a "${arg_cmd}" != "status" ] && rm -f ${TMPFILE}
  fi
}

check_yt_stream()
{
  TIMELIFE=60
  
  get_opt "HD"
  [ -z "$opt" ] && opt=$YOUTUBE_HD
  case $opt in
    yes|Yes|YES|1)
      hdc=$opt
    ;;
    *)
      hdc=''
  esac
  
  video_id=`echo "$arg_url" | sed -e 's/.*v=//;s/.*\///;s/&.*//'`
  
  CACHEFILE=$CACHEPATH/yt.$video_id
  
  stream_type='video/mp4'
  stream_url=''
  server_type='youtube'
  protocol='http'
  
  let tsttime=`date +%s`-$TIMELIFE
  
  t_param=
  
  if [ -f $CACHEFILE ]; then
    if [ `date +%s -r $CACHEFILE` -gt $tsttime ]; then
      t_param=`sed -ne "1p" $CACHEFILE`
      hd_param=`sed -ne "2p" $CACHEFILE`
  #    lcache_url=`sed -ne "3p" $CACHEFILE`
    fi
  fi
  
  if [ -z "$t_param" ]; then   
      host_response=`${WGET} -q --header "User-Agent: ${USERAGENT}" -O ${TMPFILE} http://www.youtube.com/watch?v=$video_id 2>&1`
      t_param=`sed -ne '/"t": "/p' ${TMPFILE} | sed -e 's/.*"t": "//;s/".*$//'`
      hd_param=`sed -ne "/'IS_HD_AVAILABLE': /p" ${TMPFILE} | sed -e "s/.*'IS_HD_AVAILABLE': //;s/,.*//"`
      echo $t_param > $CACHEFILE
      echo $hd_param >> $CACHEFILE
  #    echo $lcache_url >> $CACHEFILE
      rm $TMPFILE
  fi
  [ -n "$tst" ] && echo "IS_HD_AVAILABLE=$hd_param; t=$t_param"
  
  # MP4 by default
  suffix="&fmt=18"
  
  if [ -n "$hdc" -a "$hd_param" = "true" ]; then
      suffix="&fmt=22"
  fi
  
  if [ -n "$t_param" ]; then
    stream_url="http://www.youtube.com/get_video?video_id=${video_id}&t=${t_param}${suffix}"
  fi
}

check_stream()
{
  if echo "${arg_url}" | grep -q -s "www.youtube.com"; then 
    check_yt_stream
  else
    check_av_stream
  fi
  return 0
}

command_playlist()
{
  echo "Content-type: text/xml"
  echo
  name=`echo "${arg_url}" | sed 's/\//\n/g' | sed -n '$p'`
  ext=`echo "${arg_url}" | sed 's/\./\n/g' | sed -n '$p'`
  case $ext in
    xspf|XSPF)
      cat ${arg_url}
    ;;
    m3u|M3U)
      echo "<playlist version='1' xmlns='http://xspf.org/ns/0/'>"
      echo "<title>$name</title>"
      echo "<trackList>"
      track=
      for line in `cat ${arg_url} | sed '/^ *$/d;s/ /\&nbsp;/g'`
      do
        line=`echo $line | sed 's/\&nbsp;/ /g'`
    		if echo "$line" | grep -q -s "^#"; then
    		  title=`echo "$line" | sed -n '/^#EXTINF:/p' | sed 's/^#EXTINF:.*,//'`
    		  if [ -n "$title" ]; then
            if [ -z "$track" ]; then
        		  echo "<track>"
        		  track=yes
        		fi
    		    echo "<title>${title}</title>"
    		  fi
    		else
          if [ -z "$track" ]; then
      		  echo "<track>"
      		  track=yes
      		fi
      		echo "<location>${line}</location>"
      		echo "</track>"
      		track=
    		fi
      done
      if [ -n "$track" ]; then
        echo "</track>"
      fi
      echo "</trackList>"
      echo "</playlist>"
    ;;
    *)
      echo "<playlist version='1' xmlns='http://xspf.org/ns/0/'>"
      echo "<title>Unknown playlist format</title>"
      echo "</playlist>"
    ;;
  esac    
  return 0
}

command_text()
{
  check_stream
  echo "Content-type: text/plain"
  echo
  echo "Protocol: $protocol"
  echo "Type: $stream_type"
  echo "Stream url: $stream_url"
  echo "Host: $host"
  echo "Host response: $host_response"
  echo "Server type: $server_type"
  echo
  echo "$buf"
  echo
  return 0
}

command_info()
{
  check_stream
  echo "Content-type: text/xml"
  echo
  echo "<?xml version='1.0' encoding='UTF-8'?>"
  echo "<info>"
  stream_class=`echo "$stream_type" | sed 's/\/.*//'`
  echo "<stream url='`echo $stream_url | sed 's/&/&amp;/g'`' type='$stream_type' soft='$server_type' class='$stream_class' protocol='$protocol' />"
  if [ -f ${TMPFILE} ]; then
    echo "<status>"
    case $server_type in
      shoutcast)
    	  print_status_item 'Server Status' 'server-status'
    	  print_status_item 'Stream Status' 'stream-status'
    	  stream_bitrate=`echo "$value" | sed 's/.*is up at //' | awk '{print $1}'`
    	  listeners=`echo "$value" | sed 's/.*with //' | awk '{print $1}'`
    	  print_status_item 'Listener Peak' 'listener-peak'
    	  print_status_item 'Average Listen Time' 'average-listener-time'
    	  print_status_item 'Stream Title' 'stream-title'
    	  print_status_item 'Content Type' 'content-type'
    	  print_status_item 'Stream Genre' 'stream-genre'
    	  print_status_item 'Current Song' 'current-song'
    	  echo "<stream-bitrate>$stream_bitrate</stream-bitrate>"
    	  echo "<listeners>$listeners</listeners>"
    	;;
      icecast)
    	  mount_point=`echo "$stream_url" | sed 's/\//\n/g' | sed -n '$p' | sed 's/ *$//'` 
    	  if grep -q -s "/${mount_point}" ${TMPFILE}; then
          sed -e 's/<[^<>]*>/\n/g' ${TMPFILE} | sed 's/^ *//' | sed '/^ *$/d' | sed 's/&amp;/&/g;s/&nbsp;/ /g;s/&lt;/</g;s/&gt;/>/g' | sed "1,/[Mm]ount [Pp]oint.*${mount_point}/d" | sed '/[mM]ount [pP]oint/,$d' | sed '/upport icecast development/,$d' > ${TMPFILE}.$$
    	    mv -f $TMPFILE.$$ $TMPFILE
      	  echo "<server-status/>"
      	  print_stat_item 'Mount started' 'stream-status'
      	  print_stat_item 'Peak Listeners' 'listener-peak'
      	  echo "<average-listener-time/>"
      	  print_stat_item 'Stream Title' 'stream-title'
      	  print_stat_item 'Content Type' 'content-type'
      	  print_stat_item 'Stream Genre' 'stream-genre'
      	  print_stat_item 'Current Song' 'current-song'
      	  print_stat_item 'Bitrate' 'stream-bitrate'
      	  print_stat_item 'Current Listeners' 'listeners'
      	fi
      ;;
    	*)
    	;;
    esac
    echo "</status>"
    rm -f ${TMPFILE}
  fi
  echo "</info>"
  return 0
}

command_scan()
{
  echo "Content-type: text/xml"
  echo
  echo "<?xml version='1.0' encoding='UTF-8'?>"
  echo "<list>"
  
  if [ -f ${XSPFSCAN} ]; then
    for path in `cat ${XSPFSCAN}`
    do
      path=`echo "$path" | sed 's/\/*$//'`
      if [ -d ${path} ]; then
        for file in `ls -1 ${path}/*.xspf ${path}/*.m3u 2>/dev/null`
        do
          title=`echo "${file}" | sed 's/^.*\///'`
          base=`echo "${file}" | sed 's/(.*)\/[^/]*$/\1/'` 
          echo "<item>"
          echo "  <content basepath=\"${base}\">${file}</content>"
          echo "  <title>${title}</title>"
          echo "</item>"
        done
      fi
    done
  fi
  
  echo "</list>"
  
  return 0
}

case ${arg_cmd} in
  playlist)
    command_playlist
  ;;
  text)
    command_text
  ;;
  info|status)
    command_info
  ;;
  stream)
    get_opt "Protocol"
    case $opt in
      mms|mmst|mmsh|http|rtsp|ftp)
        msdlopt=$opt
      ;;
      *)
        msdlopt=''
    esac

    get_opt "Bandwidth"
    [ -z "$opt" -a -n "$NET_BANDWIDTH" ] && opt=$NET_BANDWIDTH
    [ -n "$opt" ] && msdlopt="$msdlopt -b $opt"

    get_opt "Speed"
    [ -n "$opt" ] && msdlopt="$msdlopt -s $opt"
  
    check_stream
    echo "Content-type: $stream_type"
    echo
    exec $MSDL $msdlopt -q -o - $stream_url
  ;;
  *)
    command_scan
  ;;
esac

